import anthropic
import streamlit as st
import logging
import base64
import pandas as pd
import matplotlib.pyplot as plt  # ‚úÖ Import manquant
import seaborn as sns            # ‚úÖ Import manquant
import plotly.express as px      # ‚úÖ Import manquant
import numpy as np               # ‚úÖ Import manquant
# ‚úÖ Configuration des logs
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ Initialisation du client Anthropic
def initialize_ai_client(api_key):
    return anthropic.Anthropic(api_key=api_key)

# ‚úÖ Fonction g√©n√©rique pour envoyer des requ√™tes √† Claude
def send_request_to_claude(client, prompt, max_tokens=2000):
    try:
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=max_tokens,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.content[0].text
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la requ√™te Claude : {e}")
        st.error(f"Erreur lors de la requ√™te Claude : {str(e)}")
        return None

# ‚úÖ G√©n√©rer des recommandations IA
def generate_recommendations(df, api_key):
    client = initialize_ai_client(api_key)
    dataset_summary = f"""
    **Aper√ßu du Jeu de Donn√©es :**
    - Colonnes : {', '.join(df.columns)}
    - Statistiques descriptives :
    {df.describe(include='all').to_string()}
    """

    prompt = f"""
    Tu es un expert en analyse de donn√©es. √Ä partir des informations suivantes :

    {dataset_summary}

    1. Identifie les principales tendances et anomalies dans les donn√©es.
    2. Sugg√®re des actions bas√©es sur ces insights pour am√©liorer les performances.
    3. Mets en √©vidence toute relation inattendue entre les variables.

    G√©n√®re un rapport concis sous forme de points cl√©s.
    """
    return send_request_to_claude(client, prompt)

# ‚úÖ D√©tecter des anomalies dans les donn√©es
def detect_anomalies(df, api_key):
    client = initialize_ai_client(api_key)
    dataset_summary = f"""
    **Aper√ßu des Donn√©es :**
    - Colonnes : {', '.join(df.columns)}
    - Statistiques descriptives :
    {df.describe(include='all').to_string()}
    """

    prompt = f"""
    Tu es un sp√©cialiste en d√©tection d'anomalies. Sur la base des donn√©es suivantes :

    {dataset_summary}

    Identifie les anomalies potentielles, en expliquant pourquoi elles pourraient √™tre consid√©r√©es comme telles.
    Donne des suggestions sur la mani√®re de g√©rer ces anomalies.
    """
    return send_request_to_claude(client, prompt)


def interpret_data(df, image_file, api_key):
    client = initialize_ai_client(api_key)
    image_base64 = base64.b64encode(image_file.read()).decode("utf-8")
    recommendations = generate_recommendations(df, api_key)

    prompt = f"""
    Tu es un expert en analyse de donn√©es et en interpr√©tation visuelle. On te fournit :
    1. Une image en entr√©e d√©crivant le contexte des donn√©es.
    2. Un dataset analys√© et visualis√© sous forme de graphique.
    3. Des recommandations g√©n√©r√©es √† partir de l'analyse des donn√©es.

    Ta mission :
    - Explique les insights cl√©s du dataset en relation avec l'image fournie.
    - Compare les r√©sultats de la visualisation avec le contexte de l'image.
    - Mets en √©vidence les recommandations pertinentes pour cette situation.

    Voici les √©l√©ments :
    - üìä Donn√©es (R√©sum√©) : {df.describe(include='all').to_string()}
    - üì∑ Image fournie (en base64) : {image_base64}
    - üîç Recommandations IA : {recommendations}

    Fournis une interpr√©tation d√©taill√©e sous forme de rapport.
    """
    return send_request_to_claude(client, prompt)


# ‚úÖ G√©n√©rer des visualisations personnalis√©es sans texte explicatif
def call_llm_for_viz(df, user_prompt, api_key):
    client = initialize_ai_client(api_key)
    dataset_summary = f"""
    Colonnes et types :
    {df.dtypes.to_string()}

    Description du jeu de donn√©es :
    {df.describe(include='all').to_string()}
    """

    prompt = f"""
    Tu es un expert en visualisation de donn√©es avec Python.
    En utilisant le DataFrame suivant nomm√© `df` :

    {dataset_summary}

    Cr√©e un code Python pour g√©n√©rer la visualisation suivante :
    {user_prompt}

    **Contraintes importantes :**
    - Donne uniquement le code Python sans aucune explication.
    - Le code doit √™tre entour√© par des balises ```python et ``` pour faciliter l'extraction.
    - Utilise uniquement `matplotlib`, `seaborn` ou `plotly`.
    - Remplace `plt.show()` par `st.pyplot(plt)` pour Streamlit.
    """
    return send_request_to_claude(client, prompt, max_tokens=1500)

# ‚úÖ Ex√©cuter dynamiquement du code Python g√©n√©r√© par l'IA
# ‚úÖ Ex√©cuter dynamiquement du code Python g√©n√©r√© par l'IA
def exec_generated_code(code: str, df: pd.DataFrame):
    try:
        # ‚úÖ Importation des modules n√©cessaires pour l'ex√©cution du code g√©n√©r√©
        exec_globals = {
            "st": st,
            "pd": pd,
            "plt": plt,   # ‚úÖ Importation correcte de matplotlib.pyplot
            "sns": sns,
            "px": px,
            "np": np,     # ‚úÖ Ajout de numpy pour les calculs math√©matiques
            "df": df
        }
        
        # ‚úÖ Compilation du code pour v√©rifier les erreurs de syntaxe
        compiled_code = compile(code, "<string>", "exec")
        
        # ‚úÖ Ex√©cution du code compil√©
        exec(compiled_code, exec_globals)
        
    except SyntaxError as syntax_err:
        error_message = (f"Erreur de syntaxe d√©tect√©e : "
                         f"Ligne {syntax_err.lineno}, "
                         f"Colonne {syntax_err.offset} -> {syntax_err.text.strip()}")
        logger.error(f"‚ùå {error_message}")
        st.error(error_message)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du code g√©n√©r√© : {e}")
        st.error(f"Erreur lors de l'ex√©cution du code g√©n√©r√© : {e}")